#!/usr/bin/bash
. ./oracle_param.ini
################################################################################
#                              CVE-2020-7760
#                                   19c
# Sample script that checks the DB version and execute a check following
# by recommendation.
# Create oracle_param.ini file with defined variables
# Both script and ini required to have u+x permission
# Sample exection
# $./CVE-2021-7760.sh
#
# Change History
# 15/10/2021  Deepak Baranwal  Original code. This is a template for creating
#                              new Bash shell scripts.
#                              Add new history entries as needed.
#
#
################################################################################
################################################################################
# Code added to validate to run only on 19.0.0.0.0 database version

# export ORACLE_BASE=/u01/app/oracle
# export ORACLE_HOME=/u01/app/oracle/product/18.4.0/db_1
# export ORACLE_SID=orclcdb
# export SQLPLUS_HOME=/u01/app/oracle/product/18.4.0/db_1/bin/sqlplus
# export ORACLE_HOME=$PATH:$ORACLE_HOM/bin


discover_7760_1(){
val1=$(sqlplus -s / as sysdba<<EOM
set heading OFF termout ON trimout ON feedback OFF
set pagesize 0
select value from v\$parameter where name='dispatchers';
EOM
)
  echo "${val1}"
  if [[ ${val1} == *"XDB"* ]]
   then
     discover_7760_1_return=1
    else
      discover_7760_1_return=0
   fi
   return "$discover_7760_1_return"
}

discover_7760_2(){
  discover_7760_2_return=0
  val1=`lsnrctl status|grep -oh "XDB"`
  val2=`lsnrctl services|grep -oh "XDB"`
  echo "${val1}"
  echo "${val2}"
  if [ "${val1}" = "XDB" ] || [ "${val2}" = "XDB" ]
  then
    discover_7760_2_return=1
  else
    discover_7760_2_return=2
  fi
  return "$discover_7760_2_return"
}

discover_7760_3(){
#To check if Database is with CDB or not.
val1=$(sqlplus -s / as sysdba<<EOM
set heading OFF termout ON trimout ON feedback OFF
set pagesize 0
SELECT CDB FROM V\$DATABASE;
EOM
)
  echo "${val1}"
  if [[ ${val1} == *"YES"* ]]
   then
     discover_7760_3_return=1
    else
      discover_7760_3_return=0
   fi
   return "$discover_7760_3_return"
}


mitigate_7760_1(){
  val1=$(sqlplus -s / as sysdba<<EOM
  set heading OFF termout ON trimout ON feedback OFF
  set pagesize 0
  SELECT dbms_xdb_config.gethttpsport() FROM dual;
EOM
)
    echo "As per Oracle administration guides, EM Express uses SSL (HTTPS) out of the box." > mitigate_7760_1.txt
    echo "As vulnerability is specific to 19c, check configuration for multitenant architecture." >> mitigate_7760_1.txt
    echo " SELECT dbms_xdb_config.gethttpsport() FROM dual;" >> mitigate_7760_1.txt
    echo "${val1}"  >> mitigate_7760_1.txt
}

mitigate_7760_2(){
  val2=$(sqlplus -s / as sysdba<<EOM
  set heading OFF termout ON trimout ON feedback OFF
  set pagesize 0
  SELECT 'https://'||SYS_CONTEXT('USERENV','SERVER_HOST')||'.'|| SYS_CONTEXT('USERENV','DB_DOMAIN')||':'|| dbms_xdb_config.gethttpsport()||'/em/' from dual;
EOM
)
 echo "${val2}"

  val3=$(sqlplus -s / as sysdba<<EOM
  set heading OFF termout ON trimout ON feedback OFF
  set pagesize 0
  SELECT 'https://'||SYS_CONTEXT('USERENV','SERVER_HOST')||':'||dbms_xdb_config.gethttpsport()||'/em/' from dual;
EOM
)

  echo "As per Oracle administration guides, EM Express uses SSL (HTTPS) out of the box." > mitigate_7760_1.txt
  echo "As vulnerability is specific to 19c, check configuration for both nonCDB architecture." >> mitigate_7760_1.txt
  echo " "  >> mitigate_7760_1.txt
  echo "SELECT 'https://'||SYS_CONTEXT('USERENV','SERVER_HOST')||'.'|| SYS_CONTEXT('USERENV','DB_DOMAIN')||':'|| dbms_xdb_config.gethttpsport()||'/em/' from dual;" >> mitigate_7760_1.txt
  echo "${val2}"  >> mitigate_7760_1.txt
  echo "SELECT 'https://'||SYS_CONTEXT('USERENV','SERVER_HOST')||':'||dbms_xdb_config.gethttpsport()||'/em/' from dual;" >> mitigate_7760_1.txt
  echo "${val3}"  >> mitigate_7760_1.txt
  echo " "  >> mitigate_7760_1.txt
  echo "As this vulnerability requires a valid user account for exploit vulnerability, audit who can access EM Express. "  >> mitigate_7760_1.txt
  echo "In order to use EM Express, a database user needs to have been granted the EM_EXPRESS_BASIC (readonly) or EM_EXPRESS_ALL (read-write) role. " >> mitigate_7760_1.txt
  echo "As there is no specific command to start/stop EM Express, but it has reliance on XDB, if the following initialization parameter is set it would disable the functionality. " >> mitigate_7760_1.txt
  echo " " >> mitigate_7760_1.txt
  echo " alter system reset dispatchers scope=spfile;" >> mitigate_7760_1.txt
}

### main ###
ver=$(sqlplus -s / as sysdba <<EOM
      set heading OFF termout ON trimout ON feedback OFF
      set pagesize 0
      select version from v\$instance;
EOM
     )

case $ver in
  '19.0.0.0.0')

    discover_7760_1
    discover_7760_2

    discover_7760_1_return=$?
    discover_7760_2_return=$?
    discover_7760_3_return=$?

    if [ "$discover_7760_1_return" = 1 ] || [ "$discover_7760_2_return" = 1]
    then
       # XDB is configured, check if Database is CDB or npt
       discover_7760_3
       if [ "$discover_7760_3_return" = 1 ]
       then
          # print for CDB
          mitigate_7760_1
       else
          # print for non-CDB
          mitigate_7760_2
       fi
    fi
    ;;
  *)
     echo "Incompatible Oracle Version"
     ;;
esac
### main ###
