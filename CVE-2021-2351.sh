#!/usr/bin/bash
#. ./oracle_param.ini
################################################################################
#                              CVE-2021-2351
#                         12.1.0.2, 12.2.0.1, 19c
# Sample script that checks the DB version and execute a check following
# by recommendation.
# Create oracle_param.ini file with defined variables
# Both script and ini required to have u+x permission
# Sample exection
# $./CVE-2021-2351.sh
#
# Change History
# 15/10/2021  Deepak Baranwal  Original code. This is a template for creating
#                              new Bash shell scripts.
#                              Add new history entries as needed.
#
#
################################################################################
################################################################################

# export ORACLE_BASE=/u01/app/oracle
# export ORACLE_HOME=/u01/app/oracle/product/18.4.0/db_1
# export ORACLE_SID=orclcdb
# export SQLPLUS_HOME=/u01/app/oracle/product/18.4.0/db_1/bin/sqlplus
# export ORACLE_HOME=$PATH:$ORACLE_HOM/bin
discover_2351_1(){
discover_2351_1_return=0
val1=$(sqlplus -s / as sysdba<<EOM
set heading OFF termout ON trimout ON feedback OFF
set pagesize 0
select substr(network_service_banner,0,6) from v\$session_connect_info where sid in (select distinct sid from v\$mystat) and network_service_banner like 'AES256%' ;
EOM
)
 #echo "${val1}"
 if [ "${val1}" = "AES256" ]
  then
    discover_2351_1_return=1
   else
    discover_2351_1_return=0
  fi
  return "$discover_2351_1_return"
}


discover_2351_2(){
discover_2351_2_return=0
 val2=`grep -oh "AES256" $ORACLE_HOME/network/admin/sqlnet.ora`
 #echo "${val2}"
  if [ "${val2}" = "AES256" ]
  then
    discover_2351_2_return=1
   else
    discover_2351_2_return=0
  fi
  return "$discover_2351_2_return"
}



mitigate_2351_1(){
 echo "###### " > mitigate_2351_1.txt
 echo "Recommended Server Side Setting:"  >> mitigate_2351_1.txt
 echo "SQLNET.ENCRYPTION_SERVER=REQUIRED"  >> mitigate_2351_1.txt
 echo "SQLNET.ENCRYPTION_TYPES_SERVER=(AES256)"  >> mitigate_2351_1.txt
 echo "SQLNET.CRYPTO_CHECKSUM_SERVER=REQUIRED"  >> mitigate_2351_1.txt
 echo "SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER=(SHA512)"  >> mitigate_2351_1.txt
 echo "###### "  >> mitigate_2351_1.txt
 echo "Recommended Client Side Settings:"  >> mitigate_2351_1.txt
 echo " "  >> mitigate_2351_1.txt
 echo "SQLNET.ENCRYPTION_CLIENT=REQUIRED"  >> mitigate_2351_1.txt
 echo "SQLNET.ENCRYPTION_TYPES_CLIENT=(AES256)"  >> mitigate_2351_1.txt
 echo "SQLNET.CRYPTO_CHECKSUM_CLIENT=REQUIRED"  >> mitigate_2351_1.txt
 echo "SQLNET.CRYPTO_CHECKSUM_TYPES_CLIENT=(SHA512)"  >> mitigate_2351_1.txt
 echo "###### "  >> mitigate_2351_1.txt
 echo " Additional Recommendations"  >> mitigate_2351_1.txt
 echo " Note: Verify the same for JDBC connections:"  >> mitigate_2351_1.txt
 echo "e.g. in JDBC URL string:"  >> mitigate_2351_1.txt
 echo "prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_ENCRYPTION_TYPES, (AES256));"  >> mitigate_2351_1.txt
 echo "prop.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CHECKSUM_TYPES, (SHA512));"  >> mitigate_2351_1.txt
 echo "For earlier Databases see Oracle Net services parameter "  >> mitigate_2351_1.txt
 echo "- SQLNET.ALLOWED_LOGON_VERSION"  >> mitigate_2351_1.txt
 echo "For Oracle 12c onwards see"  >> mitigate_2351_1.txt
 echo "- SQLNET.ALLOWED_LOGON_VERSION_SERVER"  >> mitigate_2351_1.txt
 echo "- SQLNET.ALLOWED_LOGON_VERSION_CLIENT"  >> mitigate_2351_1.txt
}

### main ###
ver=$(sqlplus -s / as sysdba <<EOM
      set heading OFF termout ON trimout ON feedback OFF
      set pagesize 0
      select version from v\$instance;
EOM
     )

discover_2351_1
discover_2351_2

discover_2351_1_return=$?
discover_2351_2_return=$?

if [ "$discover_2351_1_return" = 0 ] || [ "$discover_2351_2_return" = 0 ]
then
   mitigate_2351_1
  echo "printing"
else
  echo "not print"
fi

### main ###
